from tkinter import *
from tkinter import  ttk
from PIL import Image,ImageTk
import mysql.connector 
from tkinter import messagebox
 
class Hospital:
    def __init__(self, root):
        self.root = root
        self.root.title("ONLINE CRIME INVESTIGATION ")
        self.root.geometry('1530x800+0+0')


#variabes
        self.var_case_id=StringVar()
        self.var_criminal_no=StringVar()
        self.var_name=StringVar()
        self.var_nickname=StringVar()
        self.var_arrest_date=StringVar()
        self.var_date_of_crime=StringVar()
        self.var_adress=StringVar()
        self.var_age=StringVar()
        self.var_birthmark=StringVar()
        self.var_crime_type=StringVar()
        self.var_fathername=StringVar()
        self.var_occupation=StringVar()
        self.var_gender=StringVar()
        self.var_wanted=StringVar()

    
        

        lbl_title=Label(self.root, text='ONLINE CRIME INVESTIGATION',
                          font=('times new roman', 50, 'bold '), padx=1, pady=4, bd=15,
                          relief=RIDGE, bg='white', fg='red')
        lbl_title.place(x=0, y=0, width=1550, height=120)
      # LOGO 

      
        
        
        img_india1=Image.open('images/Flag-India.jpg')
        img_india1=img_india1.resize((100,100),Image.ANTIALIAS)
        self.photo_logo1=ImageTk.PhotoImage(img_india1)

        self.india1=Label(self.root,image=self.photo_logo1)
        self.india1.place(x=1350,y=20,width=100,height=80)

        #FRAME IMAGES   
     #   img_frame=Frame(self.root,bd=2,relief=RIDGE,bg='white')
      #  img_frame.place(x=400,y=120,width=600,height=170)
        
        
        img_logo=Image.open('images/CID.jpg')
        img_logo=img_logo.resize((540,160),Image.ANTIALIAS)
        self.photo_logo=ImageTk.PhotoImage(img_logo)

        self.logo=Label(image=self.photo_logo)
        self.logo.place(x=400,y=120,width=540,height=160)
        
        img_hh=Image.open('images/bkkk.jpg')
        img_hh=img_logo.resize((540,160),Image.ANTIALIAS)
        self.photo_logo=ImageTk.PhotoImage(img_hh)

        self.logo=Label(image=self.photo_logo)
        self.logo.place(x=0,y=120,width=540,height=160)

        Main_frame=Frame(self.root, bd=2, relief=RIDGE, bg='gold')
        Main_frame.place(x=10, y=280, width=1500, height=560)


# upper frame 
        upper_frame=LabelFrame(Main_frame, bd=2, relief=RIDGE,text='Criminal Info',bg='white',
                                 fg='brown', font=('arial', 20, 'bold '))

        upper_frame.place(x=0, y=5, width=1400, height=350)

       #down frame
        down_frame=LabelFrame(Main_frame, bd=2, relief=RIDGE,text='Criminal Info Table',bg='white',
                                 fg='brown', font=('arial', 20, 'bold '))

        down_frame.place(x=0, y=350, width=1400, height=350)


        search_frame = LabelFrame(down_frame, bd=2, relief=RIDGE,text='Search Criminal Record',
                                 bg='black', fg='darkgreen', font=('arial', 10, 'bold '))
        search_frame.place(x=0, y=0, width=1470, height=60)



# label
#case id
        caseid = Label(upper_frame,  text='Case ID: ', font=('arial', 11, 'bold '), fg='red', bg='white')
        caseid.grid(row=0, column=0, padx=2, sticky=W)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_case_id   , width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=0, column=1, padx=2, sticky=W)

        # crminal  number
        lbl_criminal_no = Label(upper_frame, text='Criminal Number : ', font=('arial', 11, 'bold '), fg='red',
                                bg='white')
        lbl_criminal_no.grid(row=0, column=2, padx=2, sticky=W, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_criminal_no, width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=0, column=3, padx=2, pady=7, )


# criminal name
        lbl_criminal_name = Label(upper_frame, text='Criminal Name : ', font=('arial', 11, 'bold '), fg='red',
                                  bg='white')
        lbl_criminal_name.grid(row=1, column=0, padx=2, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_name ,  width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=1, column=1, padx=2, pady=7)


#criminal nickname
        lbl_criminalnick_name = Label(upper_frame, text='Criminal Nickname : ', font=('arial', 11, 'bold '), fg='red',
                                      bg='white')
        lbl_criminalnick_name.grid(row=1, column=2, padx=2, sticky=W, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_nickname ,  width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=1, column=3, padx=2, pady=7)

# arrest date 
        lbl_arrestdate = Label(upper_frame, text='Arrest Date  : ', font=('arial', 11, 'bold '), fg='red',
                               bg='white')
        lbl_arrestdate.grid(row=2, column=0, padx=2, sticky=W, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_arrest_date , width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=2, column=1, padx=2, pady=7)


#date of crime
        lbl_dateofcrime = Label(upper_frame, text='Date of Crime : ', font=('arial', 11, 'bold '), fg='red',
                                bg='white')
        lbl_dateofcrime.grid(row=2, column=2, padx=2, sticky=W, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_date_of_crime ,  width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=2, column=3, padx=2, pady=7)

        # address

        lbl_address = Label(upper_frame, text='Address: ', font=('arial', 11, 'bold '), fg='red',
                            bg='white')
        lbl_address.grid(row=3, column=0, padx=2, sticky=W, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_adress ,  width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=3, column=1, padx=2, pady=7)

        # age
        lbl_age = Label(upper_frame, text='Age: ', font=('arial', 11, 'bold '), fg='red',
                        bg='white')
        lbl_age.grid(row=3, column=2, padx=2, sticky=W, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_age , width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=3, column=3, padx=2, pady=7)

#occupation
        lbl_occupation = Label(upper_frame, text="Occupation: ", font=('arial', 11, 'bold '), fg='red',
                               bg='white')
        lbl_occupation.grid(row=4, column=0, padx=2, sticky=W, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_occupation ,  width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=4, column=1, padx=2, pady=7)
#birthmark
        lbl_birthmark = Label(upper_frame, text='Birth Mark:', font=('arial', 11, 'bold '), fg='red',
                              bg='white')
        lbl_birthmark.grid(row=4, column=2, padx=2, sticky=W, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_birthmark ,  width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=4, column=3, padx=2, pady=7)
#crime type
        lbl_crimetype = Label(upper_frame, text='Crime Type : ', font=('arial', 11, 'bold '), fg='red',
                              bg='white')
        lbl_crimetype.grid(row=0, column=4, padx=2, sticky=W, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_crime_type ,  width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=0, column=5, padx=2, pady=7)
#father name


        lbl_fathername = Label(upper_frame, text='Father Name : ', font=('arial', 11, 'bold '), fg='red',
                               bg='white')
        lbl_fathername.grid(row=1, column=4, padx=2, sticky=W, pady=7)

        caseentry = ttk.Entry(upper_frame,textvariable=self.var_fathername ,  width=22, font=('arial', 11, 'bold '))
        caseentry.grid(row=1, column=5, padx=2, pady=7)


#gender
        lbl_gender = Label(upper_frame, text='Gender : ', font=('arial', 11, 'bold '), fg='red',
                           bg='white')
        lbl_gender.grid(row=2, column=4, padx=2, sticky=W, pady=7)

#wanted
        lbl_wanted = Label(upper_frame, text='Wanted: ', font=('arial', 11, 'bold '), fg='red',
                           bg='white')
        lbl_wanted.grid(row=3, column=4, padx=2, sticky=W, pady=7)

        # Radio Button
        radio_frame_gender = Frame(upper_frame, bd=2, relie=RIDGE, bg='white')
        radio_frame_gender.place(x=760, y=80, width=190, height=26)

        male = Radiobutton(radio_frame_gender,variable=self.var_gender, text='Male', value='male', font=('arial', 9, 'bold '))
        male.grid(row=0, column=0, pady=0, padx=5, sticky=W)

        female = Radiobutton(radio_frame_gender,variable=self.var_gender, text='Female', value='female', font=('arial', 9, 'bold '))
        female.grid(row=0, column=1, pady=0, padx=5, sticky=W)

        radio_wanted = Frame(upper_frame, bd=2, relie=RIDGE, bg='white')
        radio_wanted.place(x=760, y=118, width=190, height=26)

        yes = Radiobutton(radio_wanted,variable=self.var_wanted,  text='Yes', value='yes', font=('arial', 9, 'bold '))
        yes.grid(row=0, column=0, pady=0, padx=5, sticky=W)

        no = Radiobutton(radio_wanted,variable=self.var_wanted,  text='No', value='no', font=('arial', 9, 'bold '))
        no.grid(row=0, column=1, pady=0, padx=5, sticky=W)

        # Button
        button_frame = Frame(upper_frame, bd=2, relie=RIDGE, bg='white')
        button_frame.place(x=5, y=200, width=620, height=45)

        # add button
        # save recrd
        btn_add = Button(button_frame,command=self.add_data,text='Save Record', font=('arial', 9, 'bold '),
                         width=14, bg='black', fg='white')



        btn_add.grid(row=0, column=0, padx=3, pady=4)

        # update
        btn_add = Button(button_frame,command=self.update_data , text='Update ', font=('arial', 9, 'bold '),
                         width=14, bg='black', fg='white')
        btn_add.grid(row=0, column=1, padx=3, pady=4)
        # delete
        btn_add = Button(button_frame,command=self.delete_data ,  text='Delete ', font=('arial', 9, 'bold '),
                         width=14, bg='black', fg='white')
        btn_add.grid(row=0, column=2, padx=3, pady=4)
        # clear
        btn_add = Button(button_frame,command=self.clear_data,  text='Clear ', font=('arial', 9, 'bold '),
                         width=14, bg='black', fg='white')
        btn_add.grid(row=0, column=3, padx=3, pady=4)

        img_crime=Image.open('images/ashish.jpg')
        img_crime=img_crime.resize((300,250),Image.ANTIALIAS)
        self.photocrime=ImageTk.PhotoImage(img_crime)

        self.img_crime=Label(upper_frame,image=self.photocrime)
        self.img_crime.place(x=950,y=0,width=470,height=250)



        # down frame
        down_frame = LabelFrame(Main_frame, bd=2, relief=RIDGE, text='Criminal Information Table')
        down_frame.place(x=10, y=280, width=1480, height=270)

        search_frame = LabelFrame(down_frame, bd=2, relief=RIDGE, padx=20, text='Search Criminal Record',
                                  fg='darkgreen', font=('arial', 10, 'bold '))
        search_frame.place(x=0, y=0, width=1470, height=60)

        search_by = Label(search_frame, text='Search By :', fg='white', bg='green')
        search_by.grid(row=0, column=0, padx=5, sticky=W)



        self.var_com_search=StringVar()
        combo_search_box = ttk.Combobox(search_frame,textvariable=self.var_com_search , font=('arial', 10, 'bold '), width=18, state='readonly')
        combo_search_box['value'] = ('Select Options ', 'Case_id', 'Criminal_no')
        combo_search_box.current(0)
        combo_search_box.grid(row=0, column=1, padx=5, sticky=W)

        self.var_search=StringVar()
        search_txt = ttk.Entry(search_frame, textvariable=self.var_search,   width=18, font=('arial', 11, 'bold '))
        search_txt.grid(row=0, column=2, padx=2, pady=7)



        # search
        btn_search = Button(search_frame,command=self.search_data ,  text='Search ', font=('arial', 12, 'bold '),
                            width=14, bg='blue', fg='white')
        btn_search.grid(row=0, column=3, padx=3, pady=5)

        btn_add = Button(search_frame,command=self.fetch_data ,  text='Show all ', font=('arial', 12, 'bold '),
                         width=14, bg='blue', fg='white')
        btn_add.grid(row=0, column=4, padx=3, pady=5)

        table_frame = Frame(down_frame, bd=2, relief=RIDGE)
        table_frame.place(x=5, y=80, width=1400, height=170)

        scroll_x = ttk.Scrollbar(table_frame, orient=HORIZONTAL)
        scroll_y = ttk.Scrollbar(table_frame, orient=VERTICAL)

        self.criminal_table = ttk.Treeview(table_frame, column=("1", "2", "3", "4", "5", "6", "7","8","9","10","11","12","13","14"),
                                           xscrollcommand=scroll_x.set,
                                           yscrollcommand=scroll_y.set)

        scroll_x.pack(side=BOTTOM, fill=X)
        scroll_y.pack(side=RIGHT, fill=Y)

        scroll_x.config(command=self.criminal_table.xview)
        scroll_y.config(command=self.criminal_table.yview)

        self.criminal_table.heading('1', text='CASE ID')
        self.criminal_table.heading('2', text='Crime No')
        self.criminal_table.heading('3', text='Name')
        self.criminal_table.heading('4', text='Nickname ')
        self.criminal_table.heading('5', text='Arrest Date')
        self.criminal_table.heading('6', text='Date of crime')
        self.criminal_table.heading('7', text='Adress')
        self.criminal_table.heading('8', text='Age')
        self.criminal_table.heading('9', text='Birthmark')
        self.criminal_table.heading('10', text='Crime type')
        self.criminal_table.heading('11', text='Father Name')
        self.criminal_table.heading('12', text='Occupation')
        self.criminal_table.heading('13', text='Gender')
        self.criminal_table.heading('14', text='Wanted')

       


        self.criminal_table['show']='headings'

        self.criminal_table.pack(fill=BOTH,expand=1)
        self.criminal_table.column('1',width=100)
        self.criminal_table.column('2',width=100)
        self.criminal_table.column('3',width=100)
        self.criminal_table.column('4',width=100)
        self.criminal_table.column('5',width=100)
        self.criminal_table.column('6',width=100)
        self.criminal_table.column('7',width=100)
        self.criminal_table.column('8',width=100)
        self.criminal_table.column('9',width=100)
        self.criminal_table.column('10',width=100)
        self.criminal_table.column('11',width=100)
        self.criminal_table.column('12',width=100)
        self.criminal_table.column('13',width=100)
        self.criminal_table.column('14',width=100)


        self.criminal_table.pack(fill=BOTH,expand=1)

        self.criminal_table.bind("<ButtonRelease>",self.get_cursor)


        self.fetch_data()

        # add function

    def add_data(self):
                if self.var_case_id.get()=="":
                        messagebox.showerror('Error',' All feilds required')
                else:
                     try:
                       conn=mysql.connector.connect(host='localhost', username='root',password='7767922019aA@', database='online')
                       my_cursor=conn.cursor()
                       my_cursor.execute('Insert into new_table values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)',(
                                                                                               self.var_case_id.get(),
                                                                                               self.var_criminal_no.get(),
                                                                                               self.var_name.get(),
                                                                                               self.var_nickname.get(),
                                                                                               self.var_arrest_date.get(),
                                                                                               self.var_date_of_crime.get(),
                                                                                               self.var_adress.get(),
                                                                                               self.var_age.get(),
                                                                                               self.var_birthmark.get(),
                                                                                               self.var_crime_type.get(),
                                                                                               self.var_fathername.get(),
                                                                                               self.var_occupation.get(),
                                                                                               self.var_gender.get(),
                                                                                               self.var_wanted.get()
                                                                                                 
                                                                                                       ))
                                                                                            
                                                                                            
                       conn.commit()
                       self.fetch_data()
                       self.clear_data()
                       conn.close()
                       messagebox.showinfo('Sucess','Criminal Record has been added')
                     except Exception as es:
                            messagebox.showerror('Error',f'Due to {str(es)}')

                            # fetch data 

               
    def fetch_data(self):
        conn=mysql.connector.connect(host='localhost', username='root',password='7767922019aA@', database='online')
        my_cursor=conn.cursor()
        my_cursor.execute('select * from new_table')
        data=my_cursor.fetchall()
        if len(data)!=0:
                self.criminal_table.delete(*self.criminal_table.get_children())
                for i in data:
                        self.criminal_table.insert('', END , values=i)
                conn.commit()
                conn.close

                # get cursor
    def get_cursor(self,event=""):
            cursur_row=self.criminal_table.focus()
            content=self.criminal_table.item(cursur_row)
            data=content['values']


            self.var_case_id.set(data[0])
            self.var_criminal_no.set(data[1]),
            self.var_name.set(data[2]),
            self.var_nickname.set(data[3]),
            self.var_arrest_date.set(data[4]),
            self.var_date_of_crime.set(data[5]),
            self.var_adress.set(data[6]),
            self.var_age.set(data[7]),
            self.var_birthmark.set(data[8]),
            self.var_crime_type.set(data[9]),
            self.var_fathername.set(data[10]),
            self.var_occupation.set(data[11]),
            self.var_gender.set(data[12]),
            self.var_wanted.set(data[13])






    def update_data(self):
            if self.var_case_id.get()=="":
                messagebox.showerror('Error',' All feilds required')
            else:
                try:
                    update=messagebox.askyesno('Update','Are you sure wanted to update the data')
                    if update>0:
                       conn=mysql.connector.connect(host='localhost', username='root',password='7767922019aA@', database='online')
                       my_cursor=conn.cursor()
                       my_cursor.execute('update new_table set Criminal_no=%s,Name=%s,nickname=%s,arrest_date=%s,dateofcrime=%s,adress=%s,age=%s,birthmark=%s,crimetype=%s,fathername=%s,occupation=%s,gender=%s,wanted=%s where Case_id=%s', (


                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                        self.var_criminal_no.get(),
                                                                                                                                                                                                                                        self.var_name.get(),
                                                                                                                                                                                                                                        self.var_nickname.get(),
                                                                                                                                                                                                                                        self.var_arrest_date.get(),
                                                                                                                                                                                                                                        self.var_date_of_crime.get(),
                                                                                                                                                                                                                                        self.var_adress.get(),
                                                                                                                                                                                                                                        self.var_age.get(),
                                                                                                                                                                                                                                        self.var_birthmark.get(),
                                                                                                                                                                                                                                        self.var_crime_type.get(),
                                                                                                                                                                                                                                        self.var_fathername.get(),
                                                                                                                                                                                                                                        self.var_occupation.get(),
                                                                                                                                                                                                                                        self.var_gender.get(),
                                                                                                                                                                                                                                        self.var_wanted.get(),
                                                                                                                                                                                                                                        self.var_case_id.get()
                                                                                                                                                                                                                                              ))



                    else:
                            if not update:
                                    return
                    conn.commit()
                    self.fetch_data()
                    self.clear_data()
                    conn.close()
                    messagebox.showinfo('Sucess','Criminal Record Sucessfully updated ')
                except Exception as es:
                        messagebox.showinfo('Sucess','Crimnal Record Sucesfully Updated')
       

   # delete

    def delete_data(self):
            if self.var_case_id.get()=="":
                messagebox.showerror('Error',' All feilds required')

            else:
                try:
                    Delete=messagebox.askyesno('Delete','Are you sure wanted to Delete the data')
                    if Delete>0:    
                        conn=mysql.connector.connect(host='localhost', username='root',password='7767922019aA@', database='online')
                        my_cursor=conn.cursor()
                        sql='delete from new_table where Case_id=%s'
                        value=(self.var_case_id.get(),)
                        my_cursor.execute(sql,value)

                    else:
                        if not Delete:
                                return

                    conn.commit()
                    self.fetch_data()
                    self.clear_data()
                    conn.close() 
                    messagebox.showinfo('Sucess','Criminal Record Sucessfully Deleted ')
                except Exception as es:
                        messagebox.showerror('Error',f'Due to {str(es)}')
                  




       # clear
    def clear_data(self):
            self.var_case_id.set("")
            self.var_criminal_no.set("")
            self.var_name.set("")
            self.var_nickname.set("")
            self.var_arrest_date.set("")
            self.var_date_of_crime.set("")
            self.var_adress.set("")
            self.var_age.set("")
            self.var_birthmark.set("")
            self.var_crime_type.set("")
            self.var_fathername.set("")
            self.var_occupation.set("")
            self.var_gender.set("")
            self.var_wanted.set("")


            # search

    def search_data(self):
            if self.var_com_search.get()=="":
                messagebox.showerror('Error',' All Feilds required')
            else:
                try:
                     conn=mysql.connector.connecst(host='localhost', username='root',password='7767922019aA@', database='online')
                     my_cursor=conn.cursor()  
                     my_cursor.execute(' select * from new_table where ' + str(self.var_com_search.get())+" LIKE '%"+ str(self.var_search.get()+"%'"))  
                     rows=my_cursor.fetchall()
                     if len(rows)!=0:
                        self.criminal_table.delete(*self.criminal_table.get_children())
                        for i in rows:
                                self.criminal_table.insert('', END , values=i)
                        conn.commit()
                        conn.close
                except Exception as es:
                            messagebox.showerror('Error',f'Due to {str(es)}')



    

root = Tk()
ob = Hospital(root)
root.mainloop()
